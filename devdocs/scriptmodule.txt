Simple assembly language scripting module based on a Java state machine

State machine architecture (custom RISC 16 bit):
	Instruction Set Architecture:
		-Basic mode: 00 00000 0 0000 0000 - mode, opcode, unused, reg1, reg2
		-Imm   mode: 10 00000 000000000   - mode, opcode, immediate value
		
		-mode      - can be 00, 01, 10, or 11 for basic, conditional, immediate, or conditional immediate
		-opcode    - supports up to 32 instructions
		-unused    - this bit is unused in basic mode but is the ninth bit in the immediate value
		-reg1/2    - the addresses of the argument registers. Can be 0 - 15
		-immediate - a nine bit data field which can be used to directly pass a value without the use of a register
	Registers:
		-pc		  - program counter, incremented each processor cycle. Used to access the current program memory address
		-acc	  - accumulator, output for logic and math instructions
		-tmp	  - temporary, multiple use register often used for the second operator for logic and math instructions
		-flg	  - flags, stores the state flags of the processor. Each bit corresponds to a flag
		-io		  - input/output, is used in the same way as flg but stores logic IO states
		-clk	  - clock, incremented every millisecond. Can be used for couontdown timers and other timed things
		-g1 - g10 - 10 general purpose registers
	Flags (replaces "fl" in the tfl instruction):
		-eq  - if A is equal to B
		-al  - if A is larger than B
		-ze  - if A is equal to 0
		-io  - if any bit in the io register is high
		-neq - if A is not equal to B
		-nal - if A is not larger than B
		-nze - if A is not equal to 0
		-nio - if no bits in the io register are high
	Instructions: - needs more
			-nop - does nothing
		(memory)
			-mov A, B - copies the contents of register A to B
			-dat A    - copies the data from the next instruction address into register A and increments pc to skip the copied data
		(math)
			-add A, B - adds the contents of register A to B, outputs to acc
			-add imm  - adds the immediate value to tmp, outputs to acc
		(control)
			-tfl A, B - tests if a flag is true by comparing register A with B, outputs to flg. Replace "fl" with the flag condition to test. flg is automatically cleared when called
			-jmp A    - sets pc to register A and sets the internal system jump variable to true. Enable this instruction's conditional mode to use for conditional branching
			-jmp imm  - sets pc to the immediate value. This is often used to jump to a label
		(logic)
		(IO)

Language:
	Syntax:
		-#label:
		-? instr A, B //comment
		-? instr A
		-? instr
		-? instr imm
		-? instr; ? instr
	Tokens:
		-?         - enables conditional mode for the instruction. Must precede it
		-instr     - the instruction to execute. Its supported argument formats must be followed
		-A, B, imm - the input registers and immediate value
		-;         - used to specify where instructions end. This is optional at the end of a line
		-# label : - # begins the name of a label which marks an address in code. The label name can be anything. : marks the end of the label and is used to determine if the label is being defined. ; is not required when "stacking"
	Example code:
		//comment
		dat g1; 123
		mov g1, tmp
		add 1
		dat g2; 0
		teq acc, g1
		? jmp #end
		mov acc, g1
		#end: hlt

Implementation:
	Execution steps:
		1. load script from input
		2. assemble temporary (or cached) binary
		3. based on state machine settings, execute the assembled machine code
	Sections:
	State machine settings:

Notes:
	-only needs to handle logic IO
	-needs only a few instructions to handle basic math, logic, and conditionals
	-needs an instruction to handle the IO itself
	-if using an 8 bit system, up to 256 logic connections can be used
	-a single register can be used to hold the IO states of each possible connection
	-logic IO connections are simply standard c/v links with other blocks which support logic
	-determining which connections are which will be difficult, so a UI tab may be necessary to list and map connections
	-Conditionals will be executed similar to the ones used by the assembly language in Shenzhen IO
	-the conditional mode bit enables conditional execution for the instruction. If any flag in the flag register is high, it will be executed. It will save execution cycles to only enable the bit for jumps and small
		pieces of code
	-jumping to a label will set the pc to the address of the instruction right after the label. The instruction is then executed during the next cycle
